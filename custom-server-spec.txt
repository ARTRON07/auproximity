-- Introduction
"client" refers to an initialised backend on the auproximity server.
"server" refers to a custom among us server running a plugin developed for use with auproximity.

"in-game name" refers to the name of the player has displayed in-game. preferably stripping formatting via TextMesh Pro, although not necessary if this is not expected behaviour. it does _not_ refer to the player's username sent in the Hello root packet in the among us protocol.

the client and the server communicate via a standardised protocol documented below, over a simple websocket connection.

if a plugin written for a custom server is unable to implement any of the events below, most are able to be left-out, as they are not necessary for a working game.

-- Messages
every message sent via the websocket connection is in a simple json format:
{
  "op": "",
  "d": {}
}

"op" is simply the name of the event being sent, as documented in the events listed below, stylised in full uppercase with terms separated by an underscore '_'.
"d" is the payload that the event carries with it. both the server and the client should use the "op" parameter to parse this correctly.

all "gameCode" entries below, unless stated otherwise, refer to the id of the game, serialised as an integer, where the event came from.

similarly, all "name" entries refer to the name of the player, if any, that emitted the event. 

-- Events
"HELLO" (bidirectional)

payload:
{
  "gameCode": 0
}

this will always be the first message sent in the websocket communication channel. the client will send it first, with the server then sending it back as an acknowledgement. both the client and the server should accept no other messages until this message has been sent

"gameCode" refers to the id of the among us game serialised as an integer.


"DESTROYED" (server->client)

payload:
{
  "gameCode": 0
}

emitted when a room is destroyed.


"HOST_UPDATE" (server->client)

payload:
{
  "gameCode": 0,
  "name": ""
}

emitted when the host of a room changes, probably by the host of the game leaving and another player being selected. it is also sent when the client first connects to the server, as a "state update".


"PLAYER_MOVE" (server->client)

payload:
{
  "gameCode": 0,
  "name": "",
  "x": 0,
  "y": 0
}

emitted when a player changes position, either by moving via a CustomNetworkTransform update, or by a SnapTo rpc.

"x" and "y" both refer to the X position of the player and the Y position of the player respectively. both are floating point numbers between -50 and 50.


"PLAYER_COLOR" (server->client)

payload:
{
  "gameCode": 0,
  "name": "",
  "color": 0
}

emitted when the color of a player changes, typically due to a "SetColor" rpc. two players can share the same color.

"color" refers to the id of the color that the player now has, as described in the Color enum.


"SETTINGS_UPDATE" (server->client)

payload:
{
  "gameCode": 0,
  "map": 0,
  "crewmateVision": 0
}

emitted when some selected settings of a room are updated. all entries above should be optional, although preferable.

there are no specifics for implementation of the entries in the object above.


"GAME_STARTED" (server->client)

payload:
{
  "gameCode": 0
}

emitted when a game is started.


"GAME_ENDED" (server->client)

payload:
{
  "gameCode": 0
}

emitted when a game ends.


"MEETING_CALLED" (server->client)

payload:
{
 "gameCode": 0
}

emitted when a meeting is called.


"PLAYER_KILLED" (server->client)

payload:
{
  "gameData": 0,
  "name": ""
}

emitted when a player has been killed, either by being ejected out of the ship at the end of an unfortunate meeting session, or by being killed by an impostor.


"UPDATE_IMPOSTORS" (server->client)

payload:
{
  "gameData": 0,
  "names": []
}

emitted when the impostors are updated in the room, probably by a "SetInfected" rpc.

"names" refers to a list of any length of the name of all new impostors.


"ADD_CAMS" (server->client)

payload:
{
  "gameData": 0,
  "name": ""
}

emitted when a player starts looking on cameras.


"REMOVE_CAMS" (server->client)

payload:
{
  "gameData": 0,
  "name": ""
}

emitted when a player stops looking on cameras.


"COMMS_SABOTAGED" (server->client)

payload:
{
  "gameData": 0
}

emitted when the communications system is sabotaged.


"PLAYER_ENTER_VENT" (server->client)

payload:
{
  "gameData": 0,
  "name": "",
  "ventId": 0
}

emitted when a player enters a vent.

"ventId" refers to the id of the vent that the player entered on the map. 


"PLAYER_EXIT_VENT" (server->client)

payload:
{
  "gameData": 0,
  "name": ""
}

emitted when a player exits a vent.
